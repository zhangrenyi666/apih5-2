#使用自己的配置文件
#可以将“org.quartz.jobStore.useProperties”配置参数设置为“true”（默认为false），以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，
# 因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。
org.quartz.jobStore.useProperties:true

#默认或是自己改名字都行
org.quartz.scheduler.instanceName: DefaultQuartzScheduler
#如果使用集群，instanceId必须唯一，设置成AUTO
org.quartz.scheduler.instanceId = AUTO

# 实例化ThreadPool时，使用的线程类为SimpleThreadPool
org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
# threadCount和threadPriority将以setter的形式注入ThreadPool实例
# 并发个数  如果你只有几个工作每天触发几次 那么1个线程就可以,如果你有成千上万的工作，每分钟都有很多工作 那么久需要50-100之间.
# 只有1到100之间的数字是非常实用的
org.quartz.threadPool.threadCount: 5
# 优先级 默认值为5
org.quartz.threadPool.threadPriority: 5
#可以是“true”或“false”，默认为false。
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true


#在被认为“misfired”(失火)之前，调度程序将“tolerate(容忍)”一个Triggers(触发器)将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）
#org.quartz.jobStore.misfireThreshold = 5000


#存储方式使用JobStoreTX，也就是数据库（默认存储在内存中,RAMJobStore）
org.quartz.jobStore.class:org.quartz.impl.jdbcjobstore.JobStoreTX
#为JobStore选择一个DriverDelegate才能使用。DriverDelegate负责执行特定数据库可能需要的任何JDBC工作。
# StdJDBCDelegate是一个使用“vanilla”JDBC代码（和SQL语句）来执行其工作的委托,用于完全符合JDBC的驱动程序
org.quartz.jobStore.driverDelegateClass:org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#是否使用集群（如果项目只部署到 一台服务器，就不用了）
org.quartz.jobStore.isClustered = false
org.quartz.jobStore.clusterCheckinInterval=20000
org.quartz.jobStore.tablePrefix = zx_qrtz_
org.quartz.jobStore.dataSource = myDS


#配置数据源
#数据库中quartz表的表名前缀
org.quartz.dataSource.myDS.driver = com.mysql.cj.jdbc.Driver
org.quartz.dataSource.myDS.URL = jdbc:mysql://localhost:3306/zjtz?serverTimezone=GMT&characterEncoding=utf-8
org.quartz.dataSource.myDS.user = root
org.quartz.dataSource.myDS.password = root
org.quartz.dataSource.myDS.maxConnections = 5



## 导入表
## in your quartz properties file, you'll need to set
## org.quartz.jobstore.driverdelegateclass = org.quartz.impl.jdbcjobstore.stdjdbcdelegate
##
##
## by: ron cordell - roncordell
##  i didn't see this anywhere, so i thought i'd post it here. this is the script from quartz to create the tables in a mysql database, modified to use innodb instead of myisam.
#
#drop table if exists qrtz_fired_triggers;
#drop table if exists qrtz_paused_trigger_grps;
#drop table if exists qrtz_scheduler_state;
#drop table if exists qrtz_locks;
#drop table if exists qrtz_simple_triggers;
#drop table if exists qrtz_simprop_triggers;
#drop table if exists qrtz_cron_triggers;
#drop table if exists qrtz_blob_triggers;
#drop table if exists qrtz_triggers;
#drop table if exists qrtz_job_details;
#drop table if exists qrtz_calendars;
#
#create table qrtz_job_details(
#sched_name varchar(120) not null,
#job_name varchar(190) not null,
#job_group varchar(190) not null,
#description varchar(250) null,
#job_class_name varchar(250) not null,
#is_durable varchar(1) not null,
#is_nonconcurrent varchar(1) not null,
#is_update_data varchar(1) not null,
#requests_recovery varchar(1) not null,
#job_data blob null,
#primary key (sched_name,job_name,job_group))
#engine=innodb;
#
#create table qrtz_triggers (
#sched_name varchar(120) not null,
#trigger_name varchar(190) not null,
#trigger_group varchar(190) not null,
#job_name varchar(190) not null,
#job_group varchar(190) not null,
#description varchar(250) null,
#next_fire_time bigint(13) null,
#prev_fire_time bigint(13) null,
#priority integer null,
#trigger_state varchar(16) not null,
#trigger_type varchar(8) not null,
#start_time bigint(13) not null,
#end_time bigint(13) null,
#calendar_name varchar(190) null,
#misfire_instr smallint(2) null,
#job_data blob null,
#primary key (sched_name,trigger_name,trigger_group),
#foreign key (sched_name,job_name,job_group)
#references qrtz_job_details(sched_name,job_name,job_group))
#engine=innodb;
#
#create table qrtz_simple_triggers (
#sched_name varchar(120) not null,
#trigger_name varchar(190) not null,
#trigger_group varchar(190) not null,
#repeat_count bigint(7) not null,
#repeat_interval bigint(12) not null,
#times_triggered bigint(10) not null,
#primary key (sched_name,trigger_name,trigger_group),
#foreign key (sched_name,trigger_name,trigger_group)
#references qrtz_triggers(sched_name,trigger_name,trigger_group))
#engine=innodb;
#
#create table qrtz_cron_triggers (
#sched_name varchar(120) not null,
#trigger_name varchar(190) not null,
#trigger_group varchar(190) not null,
#cron_expression varchar(120) not null,
#time_zone_id varchar(80),
#primary key (sched_name,trigger_name,trigger_group),
#foreign key (sched_name,trigger_name,trigger_group)
#references qrtz_triggers(sched_name,trigger_name,trigger_group))
#engine=innodb;
#
#create table qrtz_simprop_triggers
#  (
#    sched_name varchar(120) not null,
#    trigger_name varchar(190) not null,
#    trigger_group varchar(190) not null,
#    str_prop_1 varchar(512) null,
#    str_prop_2 varchar(512) null,
#    str_prop_3 varchar(512) null,
#    int_prop_1 int null,
#    int_prop_2 int null,
#    long_prop_1 bigint null,
#    long_prop_2 bigint null,
#    dec_prop_1 numeric(13,4) null,
#    dec_prop_2 numeric(13,4) null,
#    bool_prop_1 varchar(1) null,
#    bool_prop_2 varchar(1) null,
#    primary key (sched_name,trigger_name,trigger_group),
#    foreign key (sched_name,trigger_name,trigger_group)
#    references qrtz_triggers(sched_name,trigger_name,trigger_group))
#engine=innodb;
#
#create table qrtz_blob_triggers (
#sched_name varchar(120) not null,
#trigger_name varchar(190) not null,
#trigger_group varchar(190) not null,
#blob_data blob null,
#primary key (sched_name,trigger_name,trigger_group),
#index (sched_name,trigger_name, trigger_group),
#foreign key (sched_name,trigger_name,trigger_group)
#references qrtz_triggers(sched_name,trigger_name,trigger_group))
#engine=innodb;
#
#create table qrtz_calendars (
#sched_name varchar(120) not null,
#calendar_name varchar(190) not null,
#calendar blob not null,
#primary key (sched_name,calendar_name))
#engine=innodb;
#
#create table qrtz_paused_trigger_grps (
#sched_name varchar(120) not null,
#trigger_group varchar(190) not null,
#primary key (sched_name,trigger_group))
#engine=innodb;
#
#create table qrtz_fired_triggers (
#sched_name varchar(120) not null,
#entry_id varchar(95) not null,
#trigger_name varchar(190) not null,
#trigger_group varchar(190) not null,
#instance_name varchar(190) not null,
#fired_time bigint(13) not null,
#sched_time bigint(13) not null,
#priority integer not null,
#state varchar(16) not null,
#job_name varchar(190) null,
#job_group varchar(190) null,
#is_nonconcurrent varchar(1) null,
#requests_recovery varchar(1) null,
#primary key (sched_name,entry_id))
#engine=innodb;
#
#create table qrtz_scheduler_state (
#sched_name varchar(120) not null,
#instance_name varchar(190) not null,
#last_checkin_time bigint(13) not null,
#checkin_interval bigint(13) not null,
#primary key (sched_name,instance_name))
#engine=innodb;
#
#create table qrtz_locks (
#sched_name varchar(120) not null,
#lock_name varchar(40) not null,
#primary key (sched_name,lock_name))
#engine=innodb;
#
#create index idx_qrtz_j_req_recovery on qrtz_job_details(sched_name,requests_recovery);
#create index idx_qrtz_j_grp on qrtz_job_details(sched_name,job_group);
#
#create index idx_qrtz_t_j on qrtz_triggers(sched_name,job_name,job_group);
#create index idx_qrtz_t_jg on qrtz_triggers(sched_name,job_group);
#create index idx_qrtz_t_c on qrtz_triggers(sched_name,calendar_name);
#create index idx_qrtz_t_g on qrtz_triggers(sched_name,trigger_group);
#create index idx_qrtz_t_state on qrtz_triggers(sched_name,trigger_state);
#create index idx_qrtz_t_n_state on qrtz_triggers(sched_name,trigger_name,trigger_group,trigger_state);
#create index idx_qrtz_t_n_g_state on qrtz_triggers(sched_name,trigger_group,trigger_state);
#create index idx_qrtz_t_next_fire_time on qrtz_triggers(sched_name,next_fire_time);
#create index idx_qrtz_t_nft_st on qrtz_triggers(sched_name,trigger_state,next_fire_time);
#create index idx_qrtz_t_nft_misfire on qrtz_triggers(sched_name,misfire_instr,next_fire_time);
#create index idx_qrtz_t_nft_st_misfire on qrtz_triggers(sched_name,misfire_instr,next_fire_time,trigger_state);
#create index idx_qrtz_t_nft_st_misfire_grp on qrtz_triggers(sched_name,misfire_instr,next_fire_time,trigger_group,trigger_state);
#
#create index idx_qrtz_ft_trig_inst_name on qrtz_fired_triggers(sched_name,instance_name);
#create index idx_qrtz_ft_inst_job_req_rcvry on qrtz_fired_triggers(sched_name,instance_name,requests_recovery);
#create index idx_qrtz_ft_j_g on qrtz_fired_triggers(sched_name,job_name,job_group);
#create index idx_qrtz_ft_jg on qrtz_fired_triggers(sched_name,job_group);
#create index idx_qrtz_ft_t_g on qrtz_fired_triggers(sched_name,trigger_name,trigger_group);
#create index idx_qrtz_ft_tg on qrtz_fired_triggers(sched_name,trigger_group);
#
#commit;




